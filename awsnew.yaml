AWSTemplateFormatVersion: "2010-09-09"

Description:
  This CloudFormation template deploys a basic VPC / Network.
  It deploys a VPC with 1 to 6 subnets 3 Availability Zones depending on parameter selection.
  User has the choice of public subnets or private + public subnets in each AZ.
  When private subnets are created, NATing is provided by either an EC2 instance or NAT Gateway based on user selection.
  The VPC and subnets are exported for use by other stacks.
  CloudTrail across all regions, a cloudonaut.io template

Metadata:
  # Control the UI display when running this template from the AWS Management Console:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "Network Configuration"
      Parameters:
        - NumberOfAZs
        - PrivateSubnets
        - NATType

    - Label:
        default: "CloudTrail Parameters"
      Parameters:
        - ParentAlertStack
        - CloudWatchLogsRetentionInDays
        - ExternalTrailBucket
        - LogFilePrefix
        - S3DataEvents

    - Label:
        default: "Permission Parameters"
      Parameters:
        - PermissionsBoundary

    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentKmsKeyStack
      - ParentS3VirusScanStack
    
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - BucketName
      - Access
      - Versioning
      - ExpirationInDays
      - NoncurrentVersionExpirationInDays
      - ExpirationPrefix

    - Label:
        default: 'Lambda Parameters'
      Parameters:
      - LambdaFunctionArn
      - LambdaFunctionEvent
      - LambdaFunctionFilterPrefix

Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 2
    Description: How many Availability Zones do you wish to utilize?

  PrivateSubnets:
    Type: String
    AllowedValues:
    - True
    - False
    Default: True
    Description: Do you want to create private subnets in addition to public subnets?

  NATType:
    Type: String
    AllowedValues:
    - "EC2 NAT Instance"
    - "NAT Gateway"
    Default: "NAT Gateway"
    Description: What type of NAT to use for private instances to communicate with the internet.  A single EC2 instance can be used as a NAT, or you can use the AWS NAT Gateway (managed, scalable, more expensive).  This setting will be IGNORED if you do not build private subnets.

  ParentAlertStack:
    Description: "Optional but recommended stack name of parent alert stack based on operations/alert.yaml template."
    Type: String
    Default: ""

  PermissionsBoundary:
    Description: "Optional ARN for a policy that will be used as the permission boundary for all roles created by this template."
    Type: String
    Default: ""

  CloudWatchLogsRetentionInDays:
    Description: "The number of days log events are kept in CloudWatch Logs"
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  ExternalTrailBucket:
    Description: "Optional The name of the Amazon S3 bucket where CloudTrail publishes log files. If you leave this empty, the Amazon S3 bucket is created for you."
    Type: String
    Default: ""

  LogFilePrefix:
    Description: "Optional The log file prefix."
    Type: String
    Default: ""

  S3DataEvents:
    Description: "Record data events of all S3 buckets? (Warning: additional charges apply.)"
    Type: String
    Default: "false"
    AllowedValues:
    - "true"
    - "false"

  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''

  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false, 'false-but-was-true']

  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0

  ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0

  ExpirationPrefix:
    Description: 'Optional key prefix for expiring objects.'
    Type: String
    Default: ''

  LambdaFunctionArn:
    Description: 'Optional ARN of the AWS Lambda function that S3 invokes when the specified event type occurs.'
    Type: 'String'
    Default: ''

  LambdaFunctionEvent:
    Description: 'S3 bucket event for which to invoke the AWS Lambda function.'
    Type: 'String'
    Default: 's3:ObjectCreated:*'
    AllowedValues:
    - 's3:ObjectCreated:*'
    - 's3:ObjectCreated:Put'
    - 's3:ObjectCreated:Post'
    - 's3:ObjectCreated:Copy'
    - 's3:ObjectCreated:CompleteMultipartUpload'
    - 's3:ObjectRemoved:*'
    - 's3:ObjectRemoved:Delete'
    - 's3:ObjectRemoved:DeleteMarkerCreated'
    - 's3:ObjectRestore:Post'
    - 's3:ObjectRestore:Completed'
    - 's3:ReducedRedundancyLostObject'
    - 's3:Replication:OperationFailedReplication'
    - 's3:Replication:OperationMissedThreshold'
    - 's3:Replication:OperationReplicatedAfterThreshold'
    - 's3:Replication:OperationNotTracked'

  LambdaFunctionFilterPrefix:
    Description: 'Optional preifx filter for which to invoke the AWS Lambda function (leave empty for no filter).'
    Type: String
    Default: ''

  ParentKmsKeyStack:
    Description: 'Optional Stack name of parent KMS key stack based on security/kms-key.yaml template.'
    Type: String
    Default: ''
  ParentS3VirusScanStack:
    Description: 'Optional stack name of parent S3 VirusScan stack based on https://github.com/widdix/aws-s3-virusscan template.'
    Type: String
    Default: ''
  ParentVpcEndpointStack:
    Description: 'Optional Stack name of parent VPC endpoint stack based on vpc/vpc-endpoint-s3.yaml template (Required if Access := VpcEndpointRead).'
    Type: String
    Default: ''

  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, CloudFrontRead, CloudFrontAccessLogWrite, ElbAccessLogWrite, ConfigWrite, CloudTrailWrite, VpcEndpointRead, FlowLogWrite]

Mappings:
  #  This is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year:
 AmazonLinuxAMI:
    us-east-1:
      AMI: ami-04681a1dbd79675a5    # N Virginia
    us-east-2:
      AMI: ami-0cf31d971a3ca20d6    # Ohio     
    us-west-1:
      AMI: ami-0782017a917e973e7    # N California
    us-west-2:
      AMI: ami-6cd6f714             # Oregon
    eu-west-1:
      AMI: ami-0bdb1d6c15a40392c    # Ireland
    eu-central-1:
      AMI: ami-0f5dbc86dd9cbf7a8    # Frankfurt
    sa-east-1:
      AMI: ami-0ad7b0031d41ed4b9    # Sao Paulo
    ap-southeast-1:
      AMI: ami-01da99628f381e50a    # Singapore
    ap-southeast-2:
      AMI: ami-00e17d1165b9dd3ec    # Sydney
    ap-northeast-1:
      AMI: ami-08847abae18baa040    # Tokyo

Conditions:
  BuildPublicB: !Not [ !Equals [ !Ref NumberOfAZs, 1 ]]
  BuildPublicC: !Equals [ !Ref NumberOfAZs, 3 ]
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB: !And [!Not [!Equals [!Ref NumberOfAZs,1]],!Equals [!Ref PrivateSubnets,True]]
  BuildPrivateC: !And [!Equals [!Ref NumberOfAZs,3],!Equals [!Ref PrivateSubnets, True]]
  BuildNATGateway: !And [!Equals [!Ref PrivateSubnets,True],!Equals [!Ref NATType, "NAT Gateway"]]
  BuildNATInstance: !And [!Equals [!Ref PrivateSubnets,True],!Equals [!Ref NATType, "EC2 NAT Instance"]]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, ""]]
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundary, ""]]
  InternalBucket: !Equals [!Ref ExternalTrailBucket, ""]
  ExternalBucket: !Not [!Equals [!Ref ExternalTrailBucket, ""]]
  HasLogFilePrefix: !Not [!Equals [!Ref LogFilePrefix, ""]]
  IsS3DataEvents: !Equals [!Ref S3DataEvents, "true"]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasExpirationPrefix: !Not [!Equals [!Ref ExpirationPrefix, '']]
  HasLambdaFunctionArn: !Not [!Equals [!Ref LambdaFunctionArn, '']]
  HasLambdaFunctionFilterPrefix: !Not [!Equals [!Ref LambdaFunctionFilterPrefix, '']]
  HasKmsKey: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasPrivateAccess: !Equals [!Ref Access, Private]
  HasS3VirusScan: !Not [!Equals [!Ref ParentS3VirusScanStack, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasCloudTrailWriteAccess: !Equals [!Ref Access, CloudTrailWrite]
  HasPrivateAccessAndKmsKey: !And [!Condition HasPrivateAccess, !Condition HasKmsKey]
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasElbAccessLogWriteAccess: !Equals [!Ref Access, ElbAccessLogWrite]
  HasConfigWriteAccess: !Equals [!Ref Access, ConfigWrite]
  HasVpcEndpointReadAccess: !Equals [!Ref Access, VpcEndpointRead]
  HasFlowLogWriteAccess: !Equals [!Ref Access, FlowLogWrite]

Resources:
  # First, a VPC:
  VPC:
    Description: UMDAA Pro
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: !Join ["", [!Ref "AWS::StackName", "-VPC" ]]

  # Our VPC will need internet access:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties: 
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-IGW" ]]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can"t attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Now some subnets, 2 public and 2 private:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs region ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs region ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B

  PublicSubnetC:
   Type: AWS::EC2::Subnet
   Condition: BuildPublicC
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.1.30.0/24
     AvailabilityZone: !Select [ 2, !GetAZs region ]    # Get the third AZ in the list 
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Public-C
       
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs region ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs region ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select [ 2, !GetAZs region ]    # Get the third AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C

  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1: # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # If we are using a NAT Instance, route traffic through the NAT Instance:
      InstanceId: !If [ BuildNATInstance, !Ref NATInstance, !Ref "AWS::NoValue" ]
      # Otherwise if we are using a NAT Gateway, route traffic through the NAT Gateway:
      NatGatewayId: !If [ BuildNATGateway, !Ref NATGateway, !Ref "AWS::NoValue" ]

  # Attach the public subnets to public route tables, and attach the private subnets to private route tables:
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

  # A security group for our NAT. Ingress from the VPC IPs only.  Egress is TCP & UDP only:
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildNATInstance
    DependsOn: AttachGateway
    Properties:
      GroupName: !Sub NATSecurityGroup-${AWS::StackName}
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "0"
        ToPort: "1024"
        CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: "0"
        ToPort: "65535"
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: "0"
        ToPort: "65535"
        CidrIp: 0.0.0.0/0

  # A NAT Instance will be used if the user selected Private subnets and EC2-based NAT.     
  NATInstance:
    Type: AWS::EC2::Instance
    Condition: BuildNATInstance
    DependsOn: PublicRoute1                           # Must have route to IGW established.
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # lookup from AMI map
      InstanceType: t2.small                          # Any instance type is fine
      NetworkInterfaces:
      - DeviceIndex: "0"
        SubnetId: !Ref PublicSubnetA                  # Any public subnet is fine
        AssociatePublicIpAddress: true                # We will need a public IP address
        GroupSet: [!Ref NATSecurityGroup]             # Plug in the security group
      SourceDestCheck: false  # NATs don"t work if EC2 matches source with destinations.
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
      UserData: #  This code is NAT code.  Last line signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y aws-cfn-bootstrap
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          mkdir -p /etc/sysctl.d/
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          /opt/aws/bin/cfn-signal -e 0 --resource NATInstance --stack ${AWS::StackName} --region ${AWS::Region}
    # This NATInstance is only complete when you get 1 signal back within 5 minutes".
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
  
  # A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance. 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildNATGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildNATGateway
    Properties:
      Domain: VPC

  TrailBucket:
    Condition: InternalBucket
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Prefix: !If [HasExpirationPrefix, !Ref ExpirationPrefix, !Ref 'AWS::NoValue']
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      NotificationConfiguration:
        LambdaConfigurations:
        - !If [HasLambdaFunctionArn, {Event: !Ref LambdaFunctionEvent, Function: !Ref LambdaFunctionArn, Filter: !If [HasLambdaFunctionFilterPrefix, {S3Key: {Rules: [{Name: prefix, Value: !Ref LambdaFunctionFilterPrefix}]}}, !Ref 'AWS::NoValue']}, !Ref 'AWS::NoValue']
        QueueConfigurations:
        - !If [HasS3VirusScan, {Event: 's3:ObjectCreated:*', Queue: {'Fn::ImportValue': !Sub '${ParentS3VirusScanStack}-ScanQueueArn'}}, !Ref 'AWS::NoValue']
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasKmsKey, {ServerSideEncryptionConfiguration: [{BucketKeyEnabled: true, ServerSideEncryptionByDefault: {KMSMasterKeyID: {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyArn'}, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']

  TrailBucketPolicy:
    Condition: InternalBucket
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: "*"
          Action: "s3:*"
          Resource:
          - !GetAtt "TrailBucket.Arn"
          - !Sub "${TrailBucket.Arn}/*"
          Condition:
            Bool:
              "aws:SecureTransport": false
        
        - !If
          - HasCloudTrailWriteAccess
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:GetTrailBucketAcl'
            Resource: !Sub "arn:aws:s3:::${TrailBucket}"
          - !Ref 'AWS::NoValue'
        
        - !If
          - HasCloudTrailWriteAccess
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !If [HasLogFilePrefix, !Sub "arn:aws:s3:::${TrailBucket}/${LogFilePrefix}/AWSLogs/${AWS::AccountId}/*", !Sub "arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*"]
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        
        - !If
          - HasPrivateAccessAndKmsKey
          - Principal: '*'
            Action: 's3:PutObject*'
            Effect: Deny
            Resource: !Sub "${TrailBucket.Arn}/*"
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': ''
                's3:x-amz-server-side-encryption-aws-kms-key-id': {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyArn'}
          - !Ref 'AWS::NoValue'

        - !If
          - HasPublicReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub "${TrailBucket.Arn}/*"
          - !Ref 'AWS::NoValue'

        - !If
          - HasCloudFrontReadAccess
          - Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub "${TrailBucket.Arn}/*"
          - !Ref 'AWS::NoValue'

        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              AWS: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
              - !If [HasPartitionPublic, 'arn:aws:iam::127311923021:root', !Ref 'AWS::NoValue'] # us-east-1
              - !If [HasPartitionPublic, 'arn:aws:iam::033677994240:root', !Ref 'AWS::NoValue'] # us-east-2
              - !If [HasPartitionPublic, 'arn:aws:iam::027434742980:root', !Ref 'AWS::NoValue'] # us-west-1
              - !If [HasPartitionPublic, 'arn:aws:iam::797873946194:root', !Ref 'AWS::NoValue'] # us-west-2
              - !If [HasPartitionPublic, 'arn:aws:iam::985666609251:root', !Ref 'AWS::NoValue'] # ca-central-1
              - !If [HasPartitionPublic, 'arn:aws:iam::054676820928:root', !Ref 'AWS::NoValue'] # eu-central-1
              - !If [HasPartitionPublic, 'arn:aws:iam::156460612806:root', !Ref 'AWS::NoValue'] # eu-west-1
              - !If [HasPartitionPublic, 'arn:aws:iam::652711504416:root', !Ref 'AWS::NoValue'] # eu-west-2
              - !If [HasPartitionPublic, 'arn:aws:iam::009996457667:root', !Ref 'AWS::NoValue'] # eu-west-3
              - !If [HasPartitionPublic, 'arn:aws:iam::897822967062:root', !Ref 'AWS::NoValue'] # eu-north-1
              - !If [HasPartitionPublic, 'arn:aws:iam::582318560864:root', !Ref 'AWS::NoValue'] # ap-northeast-1
              - !If [HasPartitionPublic, 'arn:aws:iam::600734575887:root', !Ref 'AWS::NoValue'] # ap-northeast-2
              - !If [HasPartitionPublic, 'arn:aws:iam::383597477331:root', !Ref 'AWS::NoValue'] # ap-northeast-3
              - !If [HasPartitionPublic, 'arn:aws:iam::114774131450:root', !Ref 'AWS::NoValue'] # ap-southeast-1
              - !If [HasPartitionPublic, 'arn:aws:iam::783225319266:root', !Ref 'AWS::NoValue'] # ap-southeast-2
              - !If [HasPartitionPublic, 'arn:aws:iam::718504428378:root', !Ref 'AWS::NoValue'] # ap-south-1
              - !If [HasPartitionPublic, 'arn:aws:iam::507241528517:root', !Ref 'AWS::NoValue'] # sa-east-1
              - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::048591011584:root', !Ref 'AWS::NoValue'] # us-gov-west-1*
              - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::190560391635:root', !Ref 'AWS::NoValue'] # us-gov-east-1*
              - !If [HasPartitionChina, 'arn:aws-cn:iam::638102146993:root', !Ref 'AWS::NoValue'] # cn-north-1*
              - !If [HasPartitionChina, 'arn:aws-cn:iam::037604701340:root', !Ref 'AWS::NoValue'] # cn-northwest-1*
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${TrailBucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          - !Ref 'AWS::NoValue'
        
        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
            Action: 's3:PutObject'
            Effect: Allow
            Resource: !Sub '${TrailBucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'

        - !If
          - HasElbAccessLogWriteAccess
          - Principal:
              Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
            Action: 's3:GetTrailBucketAcl'
            Effect: Allow
            Resource: !GetAtt 'TrailBucket.Arn'
          - !Ref 'AWS::NoValue'

        - !If
          - HasConfigWriteAccess
          - Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:GetTrailBucketAcl'
            Resource: !GetAtt 'TrailBucket.Arn'
          - !Ref 'AWS::NoValue'

        - !If
          - HasConfigWriteAccess
          - Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${TrailBucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'

        - !If
          - HasVpcEndpointReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub "${TrailBucket.Arn}/*"
            Condition:
              StringEquals:
                'aws:sourceVpce': {'Fn::ImportValue': !Sub '${ParentVpcEndpointStack}-EndpointS3'}
          - !Ref 'AWS::NoValue'
        - !If
          - HasFlowLogWriteAccess
          - Sid: AWSLogDeliveryWrite # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${TrailBucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
          - !Ref 'AWS::NoValue'
        - !If
          - HasFlowLogWriteAccess
          - Sid: AWSLogDeliveryAclCheck # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action: 's3:GetTrailBucketAcl'
            Resource: !GetAtt 'TrailBucket.Arn'
          - !Ref 'AWS::NoValue'
  
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref TrailBucket

  TrailLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays

  TrailLogGroupRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Action: "sts:AssumeRole"
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundary, !Ref "AWS::NoValue"]
      Policies:
      - PolicyName: "cloudtrail-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: !GetAtt "TrailLogGroup.Arn"

  TrailTopic:
    Type: "AWS::SNS::Topic"
    Properties: {}

  TrailTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: AWSCloudTrailSNSPolicy
          Effect: Allow
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Resource: !Ref TrailTopic
          Action: "sns:Publish"
      Topics:
      - !Ref TrailTopic

  Trail:
    Condition: InternalBucket
    DependsOn:
    - TrailBucketPolicy
    - TrailTopicPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EventSelectors: !If [IsS3DataEvents, [{DataResources: [{Type: "AWS::S3::Object", Values: ["arn:aws:s3:::"]}], IncludeManagementEvents: true, ReadWriteType: All}], !Ref "AWS::NoValue"]
      S3BucketName: !Ref TrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt "TrailLogGroup.Arn"
      CloudWatchLogsRoleArn: !GetAtt "TrailLogGroupRole.Arn"
      SnsTopicName: !GetAtt "TrailTopic.TopicName"

  ExternalTrail:
    Condition: ExternalBucket
    DependsOn:
    - TrailTopicPolicy
    Type: "AWS::CloudTrail::Trail"
    Properties:
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EventSelectors: !If [IsS3DataEvents, [{DataResources: [{Type: "AWS::S3::Object", Values: ["arn:aws:s3:::"]}], IncludeManagementEvents: true, ReadWriteType: All}], !Ref "AWS::NoValue"]
      S3BucketName: !Ref ExternalTrailBucket
      S3KeyPrefix: !Ref LogFilePrefix
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt "TrailLogGroup.Arn"
      CloudWatchLogsRoleArn: !GetAtt "TrailLogGroupRole.Arn"
      SnsTopicName: !GetAtt "TrailTopic.TopicName"

  UnauthorizedOperationMetricFilter: # CIS 3.1
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "UnauthorizedOperationCount"

  UnauthorizedOperationAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: unauthorized API calls detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: UnauthorizedOperationCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  NonMfaConsoleLoginMetricFilter: # CIS 3.2
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "NonMfaConsoleLoginCount"

  NonMfaConsoleLoginAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: Management Console sign-in without MFA detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: NonMfaConsoleLoginCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  RootUserActivityMetricFilter: # CIS 1.1 & 3.3
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{$.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent"}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "RootUserActivityCount"

  RootUserActivityAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: usage of root account/user detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: RootUserActivityCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  IamPolicyChangeMetricFilter: # CIS 3.4
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "IamPolicyChangeCount"

  IamPolicyChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: IAM policy changes detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: IamPolicyChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  CloudTrailConfigChangeMetricFilter: # CIS 3.5
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "CloudTrailConfigChangeCount"

  CloudTrailConfigChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: CloudTrail configuration changes detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: CloudTrailConfigChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  ManagementConsoleAuthFailureMetricFilter: # CIS 3.6
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication")}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "ManagementConsoleAuthFailureCount"

  ManagementConsoleAuthFailureAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: Management Console authentication failures detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: ManagementConsoleAuthFailureCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  DeletingKmsCmkMetricFilter: # CIS 3.7
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "DeletingKmsCmkCount"

  DeletingKmsCmkAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: disabling or scheduled deletion of customer created CMKs detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: DeletingKmsCmkCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  S3BucketPolicyChangeMetricFilter: # CIS 3.8
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "S3BucketPolicyChangeCount"

  S3BucketPolicyChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: S3 bucket policy changes detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: S3BucketPolicyChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  ConfigChangeMetricFilter: # CIS 3.9
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventSource = config.amazonaws.com) && (($.eventName = StopConfigurationRecorder) || ($.eventName = DeleteDeliveryChannel) || ($.eventName = PutDeliveryChannel) || ($.eventName = PutConfigurationRecorder))}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "ConfigChangeCount"

  ConfigChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: AWS Config configuration changes detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: ConfigChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  SecurityGroupChangeMetricFilter: # CIS 3.10
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "SecurityGroupChangeCount"

  SecurityGroupChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: security group changes detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: SecurityGroupChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  NaclChangeMetricFilter: # CIS 3.11
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "NaclChangeCount"
        
  NaclChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: changes to Network Access Control List (NACL) detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: NaclChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  NetworkGatewayChangeMetricFilter: # CIS 3.12
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "NetworkGatewayChangeChangeCount"

  NetworkGatewayChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: changes to network gateways detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: NetworkGatewayChangeChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  RouteTableChangeMetricFilter: # CIS 3.13
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "RouteTableChangeCount"

  RouteTableChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: changes to route tables detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: RouteTableChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

  VpcChangeMetricFilter: # CIS 3.14
    Condition: HasAlertTopic
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: '{($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)}'
      LogGroupName: !Ref TrailLogGroup
      MetricTransformations:
      - MetricValue: "1"
        MetricNamespace: !Ref "AWS::StackName"
        MetricName: "VpcChangeCount"

  VpcTableChangeAlarm:
    Condition: HasAlertTopic
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "CloudTrail: changes to VPCs detected"
      Namespace: !Ref "AWS::StackName"
      MetricName: VpcChangeCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {"Fn::ImportValue": !Sub "${ParentAlertStack}-TopicARN"}
      TreatMissingData: notBreaching

Outputs:
  VPC:
   Description: VPC of the base network
   Value: !Ref VPC
   Export:
     Name: !Sub ${AWS::StackName}-VPC

  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA

  PublicSubnetB:
    Description: Second Public Subnet
    Condition: BuildPublicB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB

  PublicSubnetC:
    Description: Third Public Subnet
    Condition: BuildPublicC
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC

  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA

  PrivateSubnetB:
    Condition: BuildPrivateB
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  PrivateSubnetC:
    Condition: BuildPrivateC
    Description: Third Private Subnet
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC

  TemplateID:
    Description: "cloudonaut.io template id."
    Value: "security/cloudtrail"
    
  TemplateVersion:
    Description: "cloudonaut.io template version."
    Value: "__VERSION__"

  StackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"

  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref TrailBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: 'Origin access identity for secure CloudFront access.'
    Value: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontOriginAccessIdentity'
      
